worker_processes auto;

error_log /dev/stdout info;

events {
    worker_connections  1024;
}

# Handle incomming RTMPS streams 
stream {
    upstream backend {
        server 127.0.0.1:1935;
  }

    server {
        listen 1936 ssl;
        proxy_pass backend;
        ssl_certificate /ssl/self_signed/rtmp.crt;
        ssl_certificate_key /ssl/self_signed/rtmp.key;
    }
}

# RTMP configuration
rtmp {
    server {
        listen 1935; # Listen on standard RTMP port
        chunk_size 4000; 

        # This application is to accept incoming stream
        application live {
            # Allows live input
            live on;
            # Drop Publishing connections that havnt sent any stream data for over 10 seconds
            drop_idle_publisher 10s;

            # for each received stream, transcode for adaptive streaming
            # This single ffmpeg command takes the input and transforms
            # the source into 4 different streams with different bitrates
            # and qualities. # these settings respect the aspect ratio.
            exec_push  /usr/local/bin/ffmpeg -i rtmp://localhost:1935/$app/$name -async 1 -vsync -1
                -c:v libx264 -c:a aac -b:v 256k  -b:a 64k  -vf "scale=480:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_low
                -c:v libx264 -c:a aac -b:v 768k  -b:a 128k -vf "scale=720:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_mid
                -c:v libx264 -c:a aac -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_high
                -c:v libx264 -c:a aac -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_hd720
                -c copy -f flv rtmp://localhost:1935/show/$name_src;
            
            # YouTube
            #push rtmp://a.rtmp.youtube.com/live2/<stream_key>;
            
            # YouTube (RTMPS)
            #push rtmp://localhost:1941/live2/<stream_key>;
            
            # Facebook Live (Via Local Stunnel Server)
            #push rtmp://localhost:1940/rtmp/<stream_key>;
        }

        # This is the HLS application
        application show {
            # Allows live input from above application
            live on;
            # Disable consuming the stream from nginx as rtmp
            deny play all;

            # Enable HTTP Live Streaming
            hls on;
            hls_fragment 3;
            hls_playlist_length 20;
            hls_path /mnt/hls/; # hls fragments path

            # Instruct clients to adjust resolution according to bandwidth
            hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution
            hls_variant _hd720 BANDWIDTH=2048000; # High bitrate, HD 720p resolution
            hls_variant _high BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution
            hls_variant _mid BANDWIDTH=448000; # Medium bitrate, SD resolution
            hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution   
        }
    }
}

# HTTP configuration
http {
    sendfile off;
    tcp_nopush on;
    access_log /dev/stdout combined;
    directio 512;

    server {
        listen 8080;

        # Redirect requests for http://<server_ip>:8080/ to http://<server_ip>:8080/player
        location = / {
            # This is required to handle reverse proxy's like NginxProxyManager, otherwise the redirect will
            # include this servers port in the redirect.
            absolute_redirect off;
            return 302 /player.html;
        }

        # Serve HLS fragments
        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
        
            root /mnt;

            # Disable cache
            add_header Cache-Control no-cache;

            # CORS setup
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }   
        }
        
        # This URL provides RTMP statistics in XML
        location /stat {
            rtmp_stat all;
            # Use stat.xsl stylesheet
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            # XML stylesheet to view RTMP stats.
            root /usr/local/nginx/html;
        }
    }
}
